# -*- coding: utf-8 -*-
"""Crepe_PeakNeighbourhoods.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a94drem1sN2ChMMdfODqSJN_U38jOgbL

Mapping between pitch values and note names for reference


notes ={


    16.35: 'C0', 17.32: 'C#0/Db0', 18.35: 'D0', 19.45: 'D#0/Eb0', 20.60: 'E0', 21.83: 'F0', 23.12: 'F#0/Gb0',

    24.50: 'G0', 25.96: 'G#0/Ab0', 27.50: 'A0', 29.14: 'A#0/Bb0', 30.87: 'B0', 32.70: 'C1', 34.65: 'C#1/Db1',

    36.71: 'D1', 38.89: 'D#1/Eb1', 41.20: 'E1', 43.65: 'F1', 46.25: 'F#1/Gb1', 49.00: 'G1', 51.91: 'G#1/Ab1',

    55.00: 'A1', 58.27: 'A#1/Bb1', 61.74: 'B1', 65.41: 'C2', 69.30: 'C#2/Db2', 73.42: 'D2', 77.78: 'D#2/Eb2',

    82.41: 'E2', 87.31: 'F2', 92.50: 'F#2/Gb2', 98.00: 'G2', 103.83: 'G#2/Ab2', 110.00: 'A2', 116.54: 'A#2/Bb2',

    123.47: 'B2', 130.81: 'C3', 138.59: 'C#3/Db3', 146.83: 'D3', 155.56: 'D#3/Eb3', 164.81: 'E3', 174.61: 'F3',

    185.00: 'F#3/Gb3', 196.00: 'G3', 207.65: 'G#3/Ab3', 220.00: 'A3', 233.08: 'A#3/Bb3', 246.94: 'B3', 261.63: 'C4',

    277.18: 'C#4/Db4', 293.66: 'D4', 311.13: 'D#4/Eb4', 329.63: 'E4', 349.23: 'F4', 369.99: 'F#4/Gb4', 392.00: 'G4',

    415.30: 'G#4/Ab4', 440.00: 'A4', 466.16: 'A#4/Bb4', 493.88: 'B4', 523.25: 'C5', 554.37: 'C#5/Db5', 587.33: 'D5',

    622.25: 'D#5/Eb5', 659.25: 'E5', 698.46: 'F5', 739.99: 'F#5/Gb5', 783.99: 'G5', 830.61: 'G#5/'
    
    }

[Crepe Documentation
](https://github.com/marl/crepe)

Mount Drive
"""

from google.colab import drive
drive.mount('/content/drive')

pip install soundfile

"""Remove silences from start and end of the song"""

import librosa
import numpy as np
import soundfile as sf


audio_file, sr = librosa.load('/content/drive/MyDrive/TY-SEM - I/EDI/Final_Notebooks/Test/blankspacemid.wav')

# Set the threshold for silence detection
threshold_energy = np.mean(np.abs(audio_file)) * 1.5  # Adjust multiplier as needed

# Find the indices where the audio exceeds the threshold energy
non_silent_indices = np.where(np.abs(audio_file) > threshold_energy)[0]

# Detect the start and end indices of the music
start_index = non_silent_indices[0]
end_index = non_silent_indices[-1]


music_segment = audio_file[start_index:end_index]


output_path = '/content/drive/MyDrive/TY-SEM - I/EDI/Audio-Samples/trimmed_blankspacemid.wav'
sf.write(output_path, music_segment, sr)


from IPython.display import Audio

audio_file, sr = librosa.load('/content/drive/MyDrive/TY-SEM - I/EDI/Audio-Samples/trimmed_blankspacemid.wav')

Audio(audio_file, rate=sr)

"""Visualization of the audio"""

import librosa
import librosa.display
import matplotlib.pyplot as plt
import numpy as np


audio_file, sr = librosa.load('/content/drive/MyDrive/TY-SEM - I/EDI/Audio-Samples/trimmed_blankspacemid.wav')


duration = len(audio_file) / sr
print(f'Duration is: {duration}')

#  waveform
plt.figure(figsize=(10, 4))
librosa.display.waveshow(audio_file, sr=sr)
plt.title('Waveform')
plt.xlabel('Time (seconds)')
plt.ylabel('Amplitude')
plt.show()

#  spectrogram
plt.figure(figsize=(10, 4))
D = librosa.amplitude_to_db(np.abs(librosa.stft(audio_file)), ref=np.max)
librosa.display.specshow(D, sr=sr, x_axis='time', y_axis='log')
plt.colorbar(format='%+2.0f dB')
plt.title('Spectrogram')
plt.xlabel('Time (seconds)')
plt.ylabel('Frequency')
plt.show()

print(len(audio_file))

"""Plotting average amplitude vs windows

Discrete Windows used
"""

import librosa
import numpy as np
import matplotlib.pyplot as plt


win_size = 2048


audio_file, sr = librosa.load('/content/drive/MyDrive/TY-SEM - I/EDI/Audio-Samples/trimmed_blankspacemid.wav')


num_Windows = len(audio_file) // win_size


avg_amplitudes = []

#  average amplitude for each window
for i in range(num_Windows):
    start = i * win_size
    end = start + win_size
    window = audio_file[start:end]
    avg_amplitude = np.mean(np.abs(window))
    avg_amplitudes.append(avg_amplitude)


plt.plot(avg_amplitudes)
plt.xlabel('Window index')
plt.ylabel('Average amplitude')
plt.show()

print(num_Windows)

"""Plotting logarithm of average Amplitude vs Window index for better visualization"""

import librosa
import numpy as np
import matplotlib.pyplot as plt


win_size = 2048


audio_file, sr = librosa.load('/content/drive/MyDrive/TY-SEM - I/EDI/Audio-Samples/trimmed_blankspacemid.wav')


num_Windows = len(audio_file) // win_size


log_avg_amplitudes = []


for i in range(num_Windows):
    start = i * win_size
    end = start + win_size
    window = audio_file[start:end]
    avg_amplitude = np.mean(np.abs(window))
    log_avg_amplitude = np.log(avg_amplitude)
    log_avg_amplitudes.append(log_avg_amplitude)

# Plot the logarithm of average amplitudes against the window index
plt.plot(log_avg_amplitudes)
plt.xlabel('Window index')
plt.ylabel('Log average amplitude')
plt.show()

pip install crepe

import crepe
from scipy.io import wavfile
from os.path import expanduser
import numpy

"""Using Crepe for Pitch Detection"""

sr, audio = wavfile.read(expanduser('/content/drive/MyDrive/TY-SEM - I/EDI/Audio-Samples/trimmed_blankspacemid.wav'))
time, frequency, confidence, activation = crepe.predict(audio, sr, viterbi=True)
a = numpy.column_stack((time, frequency, confidence))
numpy.savetxt(expanduser('/content/drive/MyDrive/TY-SEM - I/EDI/Audio-Samples/trimmed_blankspacemid.csv'), a,
              ['%.3f', '%.3f', '%.6f'],
              delimiter=',')

"""View first few rows of the CSV"""

import pandas as pd


df = pd.read_csv('/content/drive/MyDrive/TY-SEM - I/EDI/Audio-Samples/trimmed_blankspacemid.csv')
num_rows = df.shape[0]

print(df.head())
print("Number of rows:", num_rows)

"""Calculate Average Pitch value for every Window and Plot it"""

import csv
import numpy as np
import matplotlib.pyplot as plt


pitch_values = []
with open('/content/drive/MyDrive/TY-SEM - I/EDI/Audio-Samples/trimmed_blankspacemid.csv', 'r') as file:
    reader = csv.reader(file)
    for row in reader:
        pitch_values.append(float(row[1]))


#win_size = num_rows // num_Windows
win_size =991//106


#num_windows = num_Windows
num_windows = 106


avg_pitch_values = []

#average pitch value for each window
for i in range(num_windows):
    #print(i)
    start = i * win_size
    end = start + win_size
    window = pitch_values[start:end]
    #print(window)
    avg_pitch = np.mean(window)
    #print(avg_pitch)
    avg_pitch_values.append(avg_pitch)

    print("Window {}: Average Pitch: {:.2f}".format(i, avg_pitch))


plt.plot(avg_pitch_values)
plt.xlabel('Window index')
plt.ylabel('Average pitch')
plt.show()

print(len(avg_pitch_values))

print(avg_pitch_values)

print(avg_amplitudes)

"""Applying Median Filtering on the pitch values"""

import numpy as np
from scipy.signal import medfilt


pitch_values = avg_pitch_values
pitch_values = np.array(pitch_values)

# Apply median filtering with window size 3
filtered_pitch_values = medfilt(pitch_values, kernel_size=15)


print(filtered_pitch_values)
print(len(filtered_pitch_values))

for index, (item1, item2) in enumerate(zip(avg_amplitudes, avg_pitch_values)):
    print(f"Index: {index}, Avg Amplitude Item: {item1}, Avg Pitch Item: {item2}")

"""Detecting Peak Values/Local maxima in the average amplitude values"""

import numpy as np
from scipy.signal import argrelextrema
import matplotlib.pyplot as plt


amplitude_values = avg_amplitudes


order = 1
maxima_idx = argrelextrema(np.array(amplitude_values), np.greater, order=order)[0]


plt.plot(amplitude_values)
plt.plot(maxima_idx, np.array(amplitude_values)[maxima_idx], "x")
plt.xlabel("Window Index")
plt.ylabel("Average Amplitude")
plt.title("Average Amplitude vs. Window Index")
plt.show()


print("Local maxima locations:", maxima_idx)

"""Include start of the window too"""

import numpy as np
from scipy.signal import argrelextrema
import matplotlib.pyplot as plt


amplitude_values = avg_amplitudes


order = 1
maxima_idx = argrelextrema(np.array(amplitude_values), np.greater, order=order)[0]


if amplitude_values[0] >= amplitude_values[1]:
    maxima_idx = np.insert(maxima_idx, 0, 0)


plt.plot(amplitude_values)
plt.plot(maxima_idx, np.array(amplitude_values)[maxima_idx], "x")
plt.xlabel("Window Index")
plt.ylabel("Average Amplitude")
plt.title("Average Amplitude vs. Window Index")
plt.show()


print("Local maxima locations:", maxima_idx)

print(len(maxima_idx))

"""
Filtering out deepest troughs"""

import numpy as np
from scipy.signal import argrelextrema
import matplotlib.pyplot as plt


amplitude_values = avg_amplitudes


order = 1
maxima_idx = argrelextrema(np.array(amplitude_values), np.greater, order=order)[0]

# minimum peak amplitude
threshold = 0.004

# Filter out local maxima in troughs based on the threshold
filtered_maxima_idx = [i for i in maxima_idx if amplitude_values[i] > threshold]

# Include the first window's index if it is a local maximum
if len(amplitude_values) > 0 and amplitude_values[0] >= threshold:
    filtered_maxima_idx = [0] + filtered_maxima_idx

# Plot n mark the filtered local maxima
plt.plot(amplitude_values)
plt.plot(filtered_maxima_idx, np.array(amplitude_values)[filtered_maxima_idx], "x")
plt.xlabel("Window Index")
plt.ylabel("Average Amplitude")
plt.title("Average Amplitude vs. Window Index")
plt.show()


print("Filtered local maxima locations:", filtered_maxima_idx)

"""Now in this code I get indices of peak amplitudes. I have a list of pitch values with their indexes, just like the amplitude list. What I want to do is, search nearby, in the neighbourhood of these peak indices and output the max frequency in that area."""

# Define the neighborhood size
neighborhood_size = 3

#  Iterate over the filtered peak indices
max_freqs = []
for peak_idx in filtered_maxima_idx:
    # Initialize the neighborhood boundaries
    start_idx = peak_idx - neighborhood_size
    end_idx = peak_idx + neighborhood_size + 1

    #  edge cases
    if start_idx < 0:
        start_idx = 0
    if end_idx > len(pitch_values):
        end_idx = len(pitch_values)


    neighborhood_pitch = pitch_values[start_idx:end_idx]


    max_freq = np.max(neighborhood_pitch)


    max_freqs.append(max_freq)


print("Maximum Frequencies:", max_freqs)

print(len(max_freqs))

"""Convert Pitch values to Notes using Formula"""

import math
def pitch_to_closest_note_name(pitch):
    # Calculate the MIDI note number
    midi_note = 12 * (math.log2(pitch) - math.log2(440)) + 69

    # closest note frequency and its MIDI note number
    closest_midi_note = round(midi_note)
    closest_frequency = 440 * 2 ** ((closest_midi_note - 69) / 12)

    #  octave and note name of the closest note
    octave = (closest_midi_note // 12) - 1
    note_name = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'][closest_midi_note % 12]


    return note_name + str(octave), closest_frequency

pitch_to_closest_note_name(420)

my_list = []
for p in max_freqs:
  my_list.append(pitch_to_closest_note_name(p)[0])

print(len(my_list))

print(my_list)

"""Or, alternatively, convert Pitch values to Notes using direct mappings stored in Dictionary"""

notes ={
    16.35: 'C0', 17.32: 'C#0/Db0', 18.35: 'D0', 19.45: 'D#0/Eb0', 20.60: 'E0', 21.83: 'F0', 23.12: 'F#0/Gb0',
    24.50: 'G0', 25.96: 'G#0/Ab0', 27.50: 'A0', 29.14: 'A#0/Bb0', 30.87: 'B0', 32.70: 'C1', 34.65: 'C#1/Db1',
    36.71: 'D1', 38.89: 'D#1/Eb1', 41.20: 'E1', 43.65: 'F1', 46.25: 'F#1/Gb1', 49.00: 'G1', 51.91: 'G#1/Ab1',
    55.00: 'A1', 58.27: 'A#1/Bb1', 61.74: 'B1', 65.41: 'C2', 69.30: 'C#2/Db2', 73.42: 'D2', 77.78: 'D#2/Eb2',
    82.41: 'E2', 87.31: 'F2', 92.50: 'F#2/Gb2', 98.00: 'G2', 103.83: 'G#2/Ab2', 110.00: 'A2', 116.54: 'A#2/Bb2',
    123.47: 'B2', 130.81: 'C3', 138.59: 'C#3/Db3', 146.83: 'D3', 155.56: 'D#3/Eb3', 164.81: 'E3', 174.61: 'F3',
    185.00: 'F#3/Gb3', 196.00: 'G3', 207.65: 'G#3/Ab3', 220.00: 'A3', 233.08: 'A#3/Bb3', 246.94: 'B3', 261.63: 'C4',
    277.18: 'C#4/Db4', 293.66: 'D4', 311.13: 'D#4/Eb4', 329.63: 'E4', 349.23: 'F4', 369.99: 'F#4/Gb4', 392.00: 'G4',
    415.30: 'G#4/Ab4', 440.00: 'A4', 466.16: 'A#4/Bb4', 493.88: 'B4', 523.25: 'C5', 554.37: 'C#5/Db5', 587.33: 'D5',
    622.25: 'D#5/Eb5', 659.25: 'E5', 698.46: 'F5', 739.99: 'F#5/Gb5', 783.99: 'G5', 830.61: 'G#5/'}


notes_detected = []

for p in max_freqs:
    # Find closest pitch value in the mapping
    #print(p)
    closest_pitch = min(notes.keys(), key=lambda x:abs(x-p))


    note = notes[closest_pitch]


    notes_detected.append(note)


print(notes_detected)
print(len(notes_detected))

"""Matching Using Edit Distance"""

def levenshtein_distance(s1, s2):
    m = len(s1)
    n = len(s2)

    # Initialize matrix
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Initialize first row and column
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j

    # Fill in the rest of the matrix
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            cost = 0 if s1[i - 1] == s2[j - 1] else 1
            dp[i][j] = min(
                dp[i - 1][j] + 1,  # Deletion
                dp[i][j - 1] + 1,  # Insertion
                dp[i - 1][j - 1] + cost,  # Substitution
            )

    return dp[m][n]

def find_best_match(song_database, small_sequence):
    best_match = None
    min_distance = float('inf')

    for song_sequence in song_database:
        distance = min(levenshtein_distance(song_sequence[i:i+len(small_sequence)], small_sequence) for i in range(len(song_sequence) - len(small_sequence) + 1))
        if distance < min_distance:
            min_distance = distance
            best_match = song_sequence

    return best_match

song_database = [
   ['F4', 'F4', 'F4', 'F4', 'C4', 'F4', 'F4', 'D4', 'C#4/Db4', 'D4', 'D4', 'A#3/Bb3', 'A4', 'A4', 'A4', 'A4', 'A4', 'D#4/Eb4', 'F4', 'F4', 'G4', 'G4', 'G4', 'F4', 'D4', 'C#4/Db4', 'F4', 'F4', 'F4', 'C4', 'C4', 'C4', 'C4', 'C4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F5', 'G#5/', 'G#5/', 'G#5/', 'D4', 'C4', 'A#4/Bb4', 'D5', 'G5', 'G5', 'G#5/', 'G5', 'E4', 'D#4/Eb4', 'D4', 'D4', 'D4', 'F4', 'F#4/Gb4', 'F4', 'F4', 'F4', 'F4', 'E4', 'C4', 'C#4/Db4', 'F4', 'F4', 'A4', 'A4', 'C4', 'C4', 'F4', 'G4', 'G4', 'G4', 'G4', 'D4', 'D4', 'D4', 'C4', 'C4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'A4', 'A4', 'A4', 'F4', 'D4', 'D4', 'A3', 'C3', 'D#4/Eb4', 'B4', 'C5', 'C5', 'C4', 'D5', 'D5', 'D5', 'D5', 'C4', 'C4', 'F4', 'F4', 'G3', 'A3', 'A4', 'C#5/Db5', 'C#5/Db5', 'D5', 'D5', 'A#4/Bb4', 'G#4/Ab4', 'G#4/Ab4', 'A4', 'A4', 'F#4/Gb4', 'D4', 'D4', 'C4', 'A3', 'C#5/Db5', 'D5', 'D5', 'C#5/Db5', 'C5', 'A4', 'G#4/Ab4', 'G4', 'G4', 'G4', 'G4', 'G4', 'F#4/Gb4', 'G4', 'G4', 'G4', 'G4', 'A4', 'A4', 'A4', 'A4', 'G4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'D#4/Eb4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'B4', 'B4', 'D5', 'D5', 'A4', 'A4', 'G4', 'F4', 'F4', 'F4', 'C4', 'C4', 'C4', 'C4', 'C4', 'B4', 'D5', 'D5', 'D5', 'D5', 'D5', 'C#5/Db5', 'C5', 'G4', 'A4', 'A4', 'G#4/Ab4', 'C#4/Db4', 'D4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'C#5/Db5', 'C#5/Db5', 'D5', 'D5', 'A#4/Bb4', 'G#4/Ab4', 'G4', 'G4', 'G4', 'G4', 'G4', 'G4', 'G4', 'G4', 'A4', 'A4', 'A4'],
   ['D5', 'G#5/', 'G#5/', 'C5', 'F5', 'F5', 'G#5/', 'G#5/', 'G#5/', 'G#5/', 'G5', 'F5', 'F5', 'F5', 'B4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F#4/Gb4', 'A4', 'A4', 'A4', 'G4', 'F#4/Gb4', 'G4', 'F#4/Gb4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'G#4/Ab4', 'A4', 'A4', 'A4', 'A4', 'G4', 'G4', 'G4', 'F4', 'F4', 'F4', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'F4', 'F4', 'F4', 'F4', 'F#4/Gb4', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'G4', 'A4', 'A4', 'A#4/Bb4', 'A#4/Bb4', 'A4', 'G4', 'E5', 'G#5/', 'G#5/', 'F5', 'F5', 'F5', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'G4', 'A4', 'A4', 'A4', 'G4', 'G4', 'G4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'G#5/', 'G#5/', 'G#5/', 'G#5/', 'A4', 'G4', 'F#4/Gb4', 'F4', 'F4', 'F4', 'G4', 'A4', 'A4', 'E4', 'F4', 'F4', 'G4', 'G4', 'F4', 'F4', 'F4', 'F#4/Gb4', 'G4', 'A#4/Bb4', 'A#4/Bb4', 'A4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'B3', 'B3', 'C#4/Db4', 'F4', 'F4', 'F4', 'F4', 'F4', 'G#4/Ab4', 'A4', 'F1', 'E4', 'F4', 'A4', 'E4', 'F4', 'F4', 'F4', 'F4', 'G4', 'A4', 'F4', 'F4', 'C#4/Db4', 'D1', 'G1', 'G1', 'E4', 'F4', 'G4', 'A#4/Bb4', 'C5', 'A#4/Bb4', 'A#4/Bb4', 'A#4/Bb4', 'G#4/Ab4', 'G4', 'F#2/Gb2', 'G#1/Ab1', 'G#1/Ab1', 'G#1/Ab1', 'G#1/Ab1', 'G1', 'G#1/Ab1', 'G#1/Ab1', 'A#1/Bb1', 'A#1/Bb1', 'A4', 'A4', 'A4', 'G#4/Ab4', 'G#4/Ab4', 'G4', 'B2', 'A#1/Bb1', 'A#1/Bb1', 'A#1/Bb1', 'A#1/Bb1', 'A#1/Bb1', 'D#2/Eb2', 'F3'],
   ['C#5/Db5', 'B4', 'F#5/Gb5', 'F#5/Gb5', 'G5', 'G5', 'G5', 'G5', 'D5', 'D5', 'G#5/', 'G#5/', 'E5', 'E5', 'E5', 'E5', 'D5', 'D5', 'F5', 'F#5/Gb5', 'G5', 'G5', 'G5', 'G5', 'F#5/Gb5', 'G#5/', 'G#5/', 'G#5/', 'E5', 'D#5/Eb5', 'E5', 'D#5/Eb5', 'C4', 'D4', 'D4', 'D4', 'D4', 'B3', 'F#4/Gb4', 'F#4/Gb4', 'G4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'B3', 'D#4/Eb4', 'F4', 'D4', 'A#3/Bb3', 'A#3/Bb3', 'D3', 'D4', 'E4', 'E4', 'E4', 'F4', 'F4', 'D4', 'E4', 'G4', 'G4', 'G4', 'G4', 'G4', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'D4', 'E4', 'F#4/Gb4', 'C#4/Db4', 'C#4/Db4', 'A3', 'A3', 'C#4/Db4', 'D4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'E4', 'F#4/Gb4', 'F4', 'D4', 'D4', 'A4', 'A4', 'A4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F4', 'C#4/Db4', 'C#4/Db4', 'C4', 'D4', 'D4', 'D4', 'D4', 'C#4/Db4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'C5', 'C#5/Db5', 'C5', 'E4', 'E4', 'E4', 'E4', 'F#4/Gb4', 'A4', 'A4', 'B4', 'B4', 'B4', 'D#4/Eb4', 'A#3/Bb3', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'A3', 'F4', 'G4', 'A4', 'A4', 'A4', 'G#4/Ab4', 'F4', 'E4', 'D4', 'D4', 'C#4/Db4', 'A4', 'A4', 'G#4/Ab4', 'G#4/Ab4', 'F#4/Gb4', 'F4', 'F#4/Gb4', 'E4', 'D4', 'F4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'F#4/Gb4', 'A4', 'A4', 'A4', 'A4', 'B4', 'C#5/Db5', 'C#5/Db5', 'C5', 'C4', 'A4', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'A4', 'A4', 'G4', 'G#4/Ab4', 'G#4/Ab4', 'F#4/Gb4', 'F#4/Gb4', 'D#4/Eb4', 'B3', 'G4', 'A4', 'A4', 'G4', 'G#4/Ab4', 'G#4/Ab4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F4', 'F4'],
   ['C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'G#3/Ab3', 'F3', 'G#2/Ab2', 'G#1/Ab1', 'E3', 'C4', 'C4', 'C4', 'B3', 'C4', 'C4', 'C4', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'A#3/Bb3', 'C4', 'C4', 'C4', 'G#3/Ab3', 'G#3/Ab3', 'E3', 'C3', 'C#2/Db2', 'C#3/Db3', 'G#3/Ab3', 'A#3/Bb3', 'C4', 'C4', 'A#3/Bb3', 'D#2/Eb2', 'D#2/Eb2', 'F#2/Gb2', 'D#3/Eb3', 'D#3/Eb3', 'D#3/Eb3', 'F4', 'F4', 'F4', 'C4', 'C4', 'A#3/Bb3', 'G#3/Ab3', 'G#3/Ab3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'A#3/Bb3', 'C4', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'C#4/Db4', 'D4', 'D4', 'A#3/Bb3', 'A#3/Bb3', 'C4', 'C4', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'B3', 'B3', 'D#4/Eb4', 'D#4/Eb4', 'F4', 'F4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'A#3/Bb3', 'C4', 'A#3/Bb3', 'C#4/Db4', 'C#4/Db4', 'C4', 'C4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'E3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'C#4/Db4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'G#3/Ab3', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'A3', 'C4', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'A3', 'G#3/Ab3', 'F3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'D4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'C4', 'A#3/Bb3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3'],
   ['C#5/Db5', 'G#3/Ab3', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'F#3/Gb3', 'G#3/Ab3', 'G#3/Ab3', 'G3', 'A3', 'G3', 'G3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'G3', 'D5', 'D5', 'B4', 'B4', 'B4', 'F3', 'F3', 'F#3/Gb3', 'G#3/Ab3', 'D4', 'D5', 'D5', 'C5', 'B4', 'B4', 'B4', 'G4', 'A3', 'G3', 'C#4/Db4', 'D5', 'D5', 'D5', 'D5', 'B4', 'B4', 'G4', 'E4', 'D5', 'D5', 'D5', 'B4', 'B4', 'G#4/Ab4', 'G4', 'G4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'D5', 'D5', 'D5', 'B4', 'B4', 'B4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'A3', 'C#4/Db4', 'D4', 'D4', 'A4', 'A4', 'A#4/Bb4', 'B4', 'B4', 'C4', 'G#3/Ab3', 'D4', 'D4', 'B4', 'B4', 'B4', 'A#4/Bb4', 'F4', 'F4', 'E4', 'D#4/Eb4', 'D4', 'A#4/Bb4', 'C#5/Db5', 'C#5/Db5', 'B4', 'B4', 'B4', 'A4', 'G4', 'E4', 'E4', 'E4', 'A#4/Bb4', 'B4', 'B4', 'B4', 'A#4/Bb4', 'A4', 'A4', 'A4', 'E4', 'A4', 'A#4/Bb4', 'B4', 'B4', 'B4', 'A#4/Bb4', 'A4', 'A4', 'A#3/Bb3', 'G#4/Ab4', 'B4', 'B4', 'A4', 'G4', 'A4', 'A4', 'A4', 'G4', 'G4', 'A4', 'A4', 'B4', 'B4', 'B4', 'A4', 'A4', 'A#4/Bb4', 'B4', 'A#4/Bb4', 'A4', 'G4', 'G4', 'G#4/Ab4', 'A#4/Bb4', 'A#4/Bb4', 'A#4/Bb4', 'E4', 'G4', 'A4', 'A4', 'A4', 'G4', 'D#4/Eb4', 'B3', 'B3', 'A4', 'A4', 'B4', 'G4', 'G4', 'F4', 'E4', 'D4', 'D4', 'C#4/Db4', 'B3', 'G4', 'G4', 'G4', 'C#3/Db3', 'G4', 'G4', 'E4', 'D4', 'D4', 'C#4/Db4', 'C#4/Db4', 'A3', 'F3', 'G#1/Ab1', 'G1', 'G1', 'G1', 'G1', 'G1', 'G1', 'G1', 'D#2/Eb2', 'G4', 'F#4/Gb4', 'E4', 'D4', 'D4', 'B3', 'B3', 'D#4/Eb4', 'A4', 'A4', 'A4', 'G4', 'G4', 'G4', 'F#4/Gb4', 'E4', 'D#4/Eb4', 'C4', 'C4', 'C4', 'A#3/Bb3', 'G3', 'G3', 'E3', 'D#4/Eb4', 'G4', 'G4', 'G4', 'E4', 'D4', 'B3', 'B3', 'A#1/Bb1', 'G1', 'G1'],
   ['C#3/Db3', 'C#3/Db3', 'D3', 'F#3/Gb3', 'G#3/Ab3', 'G3', 'A3', 'A3', 'A3', 'A3', 'B2', 'B2', 'C#4/Db4', 'C#4/Db4', 'D3', 'F#3/Gb3', 'G3', 'G3', 'F#3/Gb3', 'A3', 'A3', 'A3', 'F3', 'B3', 'B3', 'B3', 'E3', 'E3', 'E3', 'E3', 'F#3/Gb3', 'F#3/Gb3', 'G3', 'A3', 'A3', 'A3', 'A3', 'A3', 'G#3/Ab3', 'B3', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'A3', 'A3', 'F#3/Gb3', 'F#3/Gb3', 'G3', 'G3', 'G#3/Ab3', 'A3', 'A3', 'A3', 'A3', 'F3', 'F#3/Gb3', 'B3', 'G#3/Ab3', 'G3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'G#3/Ab3', 'G#3/Ab3', 'B3', 'C#4/Db4', 'G3', 'C#4/Db4', 'C#4/Db4', 'G#3/Ab3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'C#3/Db3', 'C#3/Db3', 'C#3/Db3', 'C#3/Db3', 'F#3/Gb3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'F#3/Gb3', 'F#3/Gb3', 'G#3/Ab3', 'A3', 'A3', 'G#3/Ab3', 'G#3/Ab3', 'F#3/Gb3', 'F#3/Gb3', 'B3', 'A#3/Bb3', 'G#3/Ab3', 'F3', 'F#3/Gb3', 'A3', 'A3', 'A3', 'A3', 'A3', 'E3', 'C#3/Db3', 'C#3/Db3', 'C#3/Db3', 'C4', 'C4', 'G3', 'G3', 'F#3/Gb3', 'A3', 'A3', 'A3', 'C#4/Db4', 'E4', 'E4', 'D#4/Eb4', 'C#4/Db4', 'C#4/Db4', 'B3', 'B3', 'G#3/Ab3', 'C#4/Db4', 'D4', 'D4', 'A#3/Bb3', 'A#3/Bb3', 'G#3/Ab3', 'G#3/Ab3', 'C4', 'B3', 'C4', 'D3', 'C#3/Db3', 'C#3/Db3', 'F#3/Gb3', 'G#3/Ab3', 'E4', 'E4', 'E4', 'A3', 'A3', 'A#3/Bb3', 'A3', 'G#3/Ab3', 'G#3/Ab3', 'F#3/Gb3', 'F#3/Gb3', 'C#3/Db3', 'D#3/Eb3', 'G#3/Ab3', 'C#4/Db4', 'F#3/Gb3', 'A3', 'A3', 'A3', 'A3', 'G#3/Ab3', 'F#3/Gb3', 'E4', 'C4', 'G3', 'G3', 'B3', 'B3', 'F#3/Gb3', 'G#3/Ab3', 'A3', 'C4', 'D4', 'D4', 'A3', 'A3', 'F3', 'F3', 'C#3/Db3', 'D4', 'G3', 'F#3/Gb3', 'F#3/Gb3', 'F#3/Gb3', 'G#3/Ab3', 'G#3/Ab3'],
    ['C5', 'G#3/Ab3', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'G#3/Ab3', 'G#3/Ab3', 'A#3/Bb3', 'D#5/Eb5', 'D#5/Eb5', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#3/Ab3', 'G#3/Ab3', 'A#3/Bb3', 'D#5/Eb5', 'D#5/Eb5', 'D#5/Eb5', 'A#3/Bb3', 'C4', 'C4', 'C4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'C#4/Db4', 'C4', 'C4', 'C4', 'C4', 'C4', 'B3', 'D#4/Eb4', 'D#4/Eb4', 'A#3/Bb3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'G4', 'G4', 'G#3/Ab3', 'C4', 'C4', 'C4', 'C4', 'C4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'D#4/Eb4', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#2/Bb2', 'A#2/Bb2', 'A#2/Bb2', 'A#2/Bb2', 'A#2/Bb2', 'A#2/Bb2', 'C#3/Db3', 'C#3/Db3', 'C#3/Db3', 'A#2/Bb2', 'A#2/Bb2', 'A#3/Bb3', 'C4', 'C4', 'C4', 'A#3/Bb3', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'D4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'G#3/Ab3', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'B3', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#3/Ab3', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'A#3/Bb3', 'C#4/Db4', 'G#3/Ab3', 'A3', 'A#3/Bb3', 'B3', 'B3', 'D#4/Eb4', 'E4', 'E4', 'C#4/Db4', 'D4', 'D4', 'C4', 'F#4/Gb4', 'G4', 'A#3/Bb3', 'G#3/Ab3', 'A#3/Bb3', 'A#3/Bb3', 'B3', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'C4', 'D#4/Eb4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'D#4/Eb4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'D4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'B3', 'C4', 'C4', 'C4', 'B3', 'B3', 'C#4/Db4', 'E4', 'E4', 'E4', 'E4', 'E4', 'C#4/Db4', 'C4', 'A#3/Bb3', 'G#3/Ab3', 'G#3/Ab3', 'A3', 'A#3/Bb3', 'C4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F4', 'F4', 'F4', 'C#4/Db4', 'B3', 'A3', 'G#3/Ab3', 'A3', 'A#3/Bb3', 'A#3/Bb3', 'B3', 'G#3/Ab3', 'G#3/Ab3', 'B3', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'C4', 'G#3/Ab3', 'G#3/Ab3', 'D4', 'D4', 'D4', 'B3', 'C4', 'C4', 'C4', 'C#4/Db4', 'D#4/Eb4', 'D#4/Eb4', 'E4', 'D#4/Eb4', 'C4', 'C4', 'C4', 'C4', 'B3', 'B3', 'C#4/Db4'],
    ['E4', 'E4', 'E4', 'F#3/Gb3', 'F#3/Gb3', 'F#3/Gb3', 'E3', 'E3', 'E3', 'E3', 'E3', 'B2', 'B2', 'B2', 'B2', 'F3', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'F4', 'F4', 'B4', 'B4', 'B4', 'B4', 'B4', 'C4', 'B3', 'B3', 'C#4/Db4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'D4', 'F#4/Gb4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'E4', 'E4', 'D#4/Eb4', 'A#3/Bb3', 'F4', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'B3', 'B3', 'B3', 'B3', 'B3', 'B3', 'C#4/Db4', 'D4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'B3', 'B3', 'B3', 'B3', 'B3', 'B3', 'B3', 'D#4/Eb4', 'A3', 'B3', 'B3', 'E4', 'E4', 'E4', 'E4', 'D3', 'C4', 'C4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'C#4/Db4', 'A#4/Bb4', 'B4', 'B4', 'B4', 'G#4/Ab4']
]

small_sequence = ['C4', 'F4', 'G4', 'G4', 'A4', 'A4', 'A4', 'A4', 'G4', 'F5', 'G#5/', 'G#5/', 'E5', 'G#4/Ab4', 'F5', 'F#4/Gb4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'A4', 'A4', 'A4', 'G4']



best_match = find_best_match(song_database, small_sequence)

song_mapping = {
      tuple(['F4', 'F4', 'F4', 'F4', 'C4', 'F4', 'F4', 'D4', 'C#4/Db4', 'D4', 'D4', 'A#3/Bb3', 'A4', 'A4', 'A4', 'A4', 'A4', 'D#4/Eb4', 'F4', 'F4', 'G4', 'G4', 'G4', 'F4', 'D4', 'C#4/Db4', 'F4', 'F4', 'F4', 'C4', 'C4', 'C4', 'C4', 'C4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F5', 'G#5/', 'G#5/', 'G#5/', 'D4', 'C4', 'A#4/Bb4', 'D5', 'G5', 'G5', 'G#5/', 'G5', 'E4', 'D#4/Eb4', 'D4', 'D4', 'D4', 'F4', 'F#4/Gb4', 'F4', 'F4', 'F4', 'F4', 'E4', 'C4', 'C#4/Db4', 'F4', 'F4', 'A4', 'A4', 'C4', 'C4', 'F4', 'G4', 'G4', 'G4', 'G4', 'D4', 'D4', 'D4', 'C4', 'C4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'A4', 'A4', 'A4', 'F4', 'D4', 'D4', 'A3', 'C3', 'D#4/Eb4', 'B4', 'C5', 'C5', 'C4', 'D5', 'D5', 'D5', 'D5', 'C4', 'C4', 'F4', 'F4', 'G3', 'A3', 'A4', 'C#5/Db5', 'C#5/Db5', 'D5', 'D5', 'A#4/Bb4', 'G#4/Ab4', 'G#4/Ab4', 'A4', 'A4', 'F#4/Gb4', 'D4', 'D4', 'C4', 'A3', 'C#5/Db5', 'D5', 'D5', 'C#5/Db5', 'C5', 'A4', 'G#4/Ab4', 'G4', 'G4', 'G4', 'G4', 'G4', 'F#4/Gb4', 'G4', 'G4', 'G4', 'G4', 'A4', 'A4', 'A4', 'A4', 'G4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'D#4/Eb4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'B4', 'B4', 'D5', 'D5', 'A4', 'A4', 'G4', 'F4', 'F4', 'F4', 'C4', 'C4', 'C4', 'C4', 'C4', 'B4', 'D5', 'D5', 'D5', 'D5', 'D5', 'C#5/Db5', 'C5', 'G4', 'A4', 'A4', 'G#4/Ab4', 'C#4/Db4', 'D4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'C#5/Db5', 'C#5/Db5', 'D5', 'D5', 'A#4/Bb4', 'G#4/Ab4', 'G4', 'G4', 'G4', 'G4', 'G4', 'G4', 'G4', 'G4', 'A4', 'A4', 'A4']) : 'Ajib Dastan Hai Ye',
      tuple(['D5', 'G#5/', 'G#5/', 'C5', 'F5', 'F5', 'G#5/', 'G#5/', 'G#5/', 'G#5/', 'G5', 'F5', 'F5', 'F5', 'B4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F#4/Gb4', 'A4', 'A4', 'A4', 'G4', 'F#4/Gb4', 'G4', 'F#4/Gb4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'G#4/Ab4', 'A4', 'A4', 'A4', 'A4', 'G4', 'G4', 'G4', 'F4', 'F4', 'F4', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'F4', 'F4', 'F4', 'F4', 'F#4/Gb4', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'G4', 'A4', 'A4', 'A#4/Bb4', 'A#4/Bb4', 'A4', 'G4', 'E5', 'G#5/', 'G#5/', 'F5', 'F5', 'F5', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'G4', 'A4', 'A4', 'A4', 'G4', 'G4', 'G4', 'F4', 'F4', 'F4', 'F4', 'F4', 'F4', 'G#5/', 'G#5/', 'G#5/', 'G#5/', 'A4', 'G4', 'F#4/Gb4', 'F4', 'F4', 'F4', 'G4', 'A4', 'A4', 'E4', 'F4', 'F4', 'G4', 'G4', 'F4', 'F4', 'F4', 'F#4/Gb4', 'G4', 'A#4/Bb4', 'A#4/Bb4', 'A4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'B3', 'B3', 'C#4/Db4', 'F4', 'F4', 'F4', 'F4', 'F4', 'G#4/Ab4', 'A4', 'F1', 'E4', 'F4', 'A4', 'E4', 'F4', 'F4', 'F4', 'F4', 'G4', 'A4', 'F4', 'F4', 'C#4/Db4', 'D1', 'G1', 'G1', 'E4', 'F4', 'G4', 'A#4/Bb4', 'C5', 'A#4/Bb4', 'A#4/Bb4', 'A#4/Bb4', 'G#4/Ab4', 'G4', 'F#2/Gb2', 'G#1/Ab1', 'G#1/Ab1', 'G#1/Ab1', 'G#1/Ab1', 'G1', 'G#1/Ab1', 'G#1/Ab1', 'A#1/Bb1', 'A#1/Bb1', 'A4', 'A4', 'A4', 'G#4/Ab4', 'G#4/Ab4', 'G4', 'B2', 'A#1/Bb1', 'A#1/Bb1', 'A#1/Bb1', 'A#1/Bb1', 'A#1/Bb1', 'D#2/Eb2', 'F3']) : 'Blank Space',
      tuple( ['C#5/Db5', 'B4', 'F#5/Gb5', 'F#5/Gb5', 'G5', 'G5', 'G5', 'G5', 'D5', 'D5', 'G#5/', 'G#5/', 'E5', 'E5', 'E5', 'E5', 'D5', 'D5', 'F5', 'F#5/Gb5', 'G5', 'G5', 'G5', 'G5', 'F#5/Gb5', 'G#5/', 'G#5/', 'G#5/', 'E5', 'D#5/Eb5', 'E5', 'D#5/Eb5', 'C4', 'D4', 'D4', 'D4', 'D4', 'B3', 'F#4/Gb4', 'F#4/Gb4', 'G4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'B3', 'D#4/Eb4', 'F4', 'D4', 'A#3/Bb3', 'A#3/Bb3', 'D3', 'D4', 'E4', 'E4', 'E4', 'F4', 'F4', 'D4', 'E4', 'G4', 'G4', 'G4', 'G4', 'G4', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'D4', 'E4', 'F#4/Gb4', 'C#4/Db4', 'C#4/Db4', 'A3', 'A3', 'C#4/Db4', 'D4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'E4', 'F#4/Gb4', 'F4', 'D4', 'D4', 'A4', 'A4', 'A4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F4', 'C#4/Db4', 'C#4/Db4', 'C4', 'D4', 'D4', 'D4', 'D4', 'C#4/Db4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'C5', 'C#5/Db5', 'C5', 'E4', 'E4', 'E4', 'E4', 'F#4/Gb4', 'A4', 'A4', 'B4', 'B4', 'B4', 'D#4/Eb4', 'A#3/Bb3', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'A3', 'F4', 'G4', 'A4', 'A4', 'A4', 'G#4/Ab4', 'F4', 'E4', 'D4', 'D4', 'C#4/Db4', 'A4', 'A4', 'G#4/Ab4', 'G#4/Ab4', 'F#4/Gb4', 'F4', 'F#4/Gb4', 'E4', 'D4', 'F4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'F#4/Gb4', 'A4', 'A4', 'A4', 'A4', 'B4', 'C#5/Db5', 'C#5/Db5', 'C5', 'C4', 'A4', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'A4', 'A4', 'G4', 'G#4/Ab4', 'G#4/Ab4', 'F#4/Gb4', 'F#4/Gb4', 'D#4/Eb4', 'B3', 'G4', 'A4', 'A4', 'G4', 'G#4/Ab4', 'G#4/Ab4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F4', 'F4']) : 'Every thing I need',
      tuple(['C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'G#3/Ab3', 'F3', 'G#2/Ab2', 'G#1/Ab1', 'E3', 'C4', 'C4', 'C4', 'B3', 'C4', 'C4', 'C4', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'A#3/Bb3', 'C4', 'C4', 'C4', 'G#3/Ab3', 'G#3/Ab3', 'E3', 'C3', 'C#2/Db2', 'C#3/Db3', 'G#3/Ab3', 'A#3/Bb3', 'C4', 'C4', 'A#3/Bb3', 'D#2/Eb2', 'D#2/Eb2', 'F#2/Gb2', 'D#3/Eb3', 'D#3/Eb3', 'D#3/Eb3', 'F4', 'F4', 'F4', 'C4', 'C4', 'A#3/Bb3', 'G#3/Ab3', 'G#3/Ab3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'A#3/Bb3', 'C4', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'C#4/Db4', 'D4', 'D4', 'A#3/Bb3', 'A#3/Bb3', 'C4', 'C4', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'B3', 'B3', 'D#4/Eb4', 'D#4/Eb4', 'F4', 'F4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'A#3/Bb3', 'C4', 'A#3/Bb3', 'C#4/Db4', 'C#4/Db4', 'C4', 'C4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'E3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'C#4/Db4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'G#3/Ab3', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'A3', 'C4', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'A3', 'G#3/Ab3', 'F3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'D4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'C4', 'C4', 'A#3/Bb3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3']) : 'Perfect',
      tuple(['C#5/Db5', 'G#3/Ab3', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'F#3/Gb3', 'G#3/Ab3', 'G#3/Ab3', 'G3', 'A3', 'G3', 'G3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'G3', 'D5', 'D5', 'B4', 'B4', 'B4', 'F3', 'F3', 'F#3/Gb3', 'G#3/Ab3', 'D4', 'D5', 'D5', 'C5', 'B4', 'B4', 'B4', 'G4', 'A3', 'G3', 'C#4/Db4', 'D5', 'D5', 'D5', 'D5', 'B4', 'B4', 'G4', 'E4', 'D5', 'D5', 'D5', 'B4', 'B4', 'G#4/Ab4', 'G4', 'G4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'D5', 'D5', 'D5', 'B4', 'B4', 'B4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'A3', 'C#4/Db4', 'D4', 'D4', 'A4', 'A4', 'A#4/Bb4', 'B4', 'B4', 'C4', 'G#3/Ab3', 'D4', 'D4', 'B4', 'B4', 'B4', 'A#4/Bb4', 'F4', 'F4', 'E4', 'D#4/Eb4', 'D4', 'A#4/Bb4', 'C#5/Db5', 'C#5/Db5', 'B4', 'B4', 'B4', 'A4', 'G4', 'E4', 'E4', 'E4', 'A#4/Bb4', 'B4', 'B4', 'B4', 'A#4/Bb4', 'A4', 'A4', 'A4', 'E4', 'A4', 'A#4/Bb4', 'B4', 'B4', 'B4', 'A#4/Bb4', 'A4', 'A4', 'A#3/Bb3', 'G#4/Ab4', 'B4', 'B4', 'A4', 'G4', 'A4', 'A4', 'A4', 'G4', 'G4', 'A4', 'A4', 'B4', 'B4', 'B4', 'A4', 'A4', 'A#4/Bb4', 'B4', 'A#4/Bb4', 'A4', 'G4', 'G4', 'G#4/Ab4', 'A#4/Bb4', 'A#4/Bb4', 'A#4/Bb4', 'E4', 'G4', 'A4', 'A4', 'A4', 'G4', 'D#4/Eb4', 'B3', 'B3', 'A4', 'A4', 'B4', 'G4', 'G4', 'F4', 'E4', 'D4', 'D4', 'C#4/Db4', 'B3', 'G4', 'G4', 'G4', 'C#3/Db3', 'G4', 'G4', 'E4', 'D4', 'D4', 'C#4/Db4', 'C#4/Db4', 'A3', 'F3', 'G#1/Ab1', 'G1', 'G1', 'G1', 'G1', 'G1', 'G1', 'G1', 'D#2/Eb2', 'G4', 'F#4/Gb4', 'E4', 'D4', 'D4', 'B3', 'B3', 'D#4/Eb4', 'A4', 'A4', 'A4', 'G4', 'G4', 'G4', 'F#4/Gb4', 'E4', 'D#4/Eb4', 'C4', 'C4', 'C4', 'A#3/Bb3', 'G3', 'G3', 'E3', 'D#4/Eb4', 'G4', 'G4', 'G4', 'E4', 'D4', 'B3', 'B3', 'A#1/Bb1', 'G1', 'G1']) : 'Shake It Off',
      tuple( ['C#3/Db3', 'C#3/Db3', 'D3', 'F#3/Gb3', 'G#3/Ab3', 'G3', 'A3', 'A3', 'A3', 'A3', 'B2', 'B2', 'C#4/Db4', 'C#4/Db4', 'D3', 'F#3/Gb3', 'G3', 'G3', 'F#3/Gb3', 'A3', 'A3', 'A3', 'F3', 'B3', 'B3', 'B3', 'E3', 'E3', 'E3', 'E3', 'F#3/Gb3', 'F#3/Gb3', 'G3', 'A3', 'A3', 'A3', 'A3', 'A3', 'G#3/Ab3', 'B3', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'A3', 'A3', 'F#3/Gb3', 'F#3/Gb3', 'G3', 'G3', 'G#3/Ab3', 'A3', 'A3', 'A3', 'A3', 'F3', 'F#3/Gb3', 'B3', 'G#3/Ab3', 'G3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'G#3/Ab3', 'G#3/Ab3', 'B3', 'C#4/Db4', 'G3', 'C#4/Db4', 'C#4/Db4', 'G#3/Ab3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'A3', 'C#3/Db3', 'C#3/Db3', 'C#3/Db3', 'C#3/Db3', 'F#3/Gb3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'F#3/Gb3', 'F#3/Gb3', 'G#3/Ab3', 'A3', 'A3', 'G#3/Ab3', 'G#3/Ab3', 'F#3/Gb3', 'F#3/Gb3', 'B3', 'A#3/Bb3', 'G#3/Ab3', 'F3', 'F#3/Gb3', 'A3', 'A3', 'A3', 'A3', 'A3', 'E3', 'C#3/Db3', 'C#3/Db3', 'C#3/Db3', 'C4', 'C4', 'G3', 'G3', 'F#3/Gb3', 'A3', 'A3', 'A3', 'C#4/Db4', 'E4', 'E4', 'D#4/Eb4', 'C#4/Db4', 'C#4/Db4', 'B3', 'B3', 'G#3/Ab3', 'C#4/Db4', 'D4', 'D4', 'A#3/Bb3', 'A#3/Bb3', 'G#3/Ab3', 'G#3/Ab3', 'C4', 'B3', 'C4', 'D3', 'C#3/Db3', 'C#3/Db3', 'F#3/Gb3', 'G#3/Ab3', 'E4', 'E4', 'E4', 'A3', 'A3', 'A#3/Bb3', 'A3', 'G#3/Ab3', 'G#3/Ab3', 'F#3/Gb3', 'F#3/Gb3', 'C#3/Db3', 'D#3/Eb3', 'G#3/Ab3', 'C#4/Db4', 'F#3/Gb3', 'A3', 'A3', 'A3', 'A3', 'G#3/Ab3', 'F#3/Gb3', 'E4', 'C4', 'G3', 'G3', 'B3', 'B3', 'F#3/Gb3', 'G#3/Ab3', 'A3', 'C4', 'D4', 'D4', 'A3', 'A3', 'F3', 'F3', 'C#3/Db3', 'D4', 'G3', 'F#3/Gb3', 'F#3/Gb3', 'F#3/Gb3', 'G#3/Ab3', 'G#3/Ab3']) : 'Shape Of You',
      tuple(['C5', 'G#3/Ab3', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'G#3/Ab3', 'G#3/Ab3', 'A#3/Bb3', 'D#5/Eb5', 'D#5/Eb5', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#3/Ab3', 'G#3/Ab3', 'A#3/Bb3', 'D#5/Eb5', 'D#5/Eb5', 'D#5/Eb5', 'A#3/Bb3', 'C4', 'C4', 'C4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'C#4/Db4', 'C4', 'C4', 'C4', 'C4', 'C4', 'B3', 'D#4/Eb4', 'D#4/Eb4', 'A#3/Bb3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'G4', 'G4', 'G#3/Ab3', 'C4', 'C4', 'C4', 'C4', 'C4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'D#4/Eb4', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#2/Bb2', 'A#2/Bb2', 'A#2/Bb2', 'A#2/Bb2', 'A#2/Bb2', 'A#2/Bb2', 'C#3/Db3', 'C#3/Db3', 'C#3/Db3', 'A#2/Bb2', 'A#2/Bb2', 'A#3/Bb3', 'C4', 'C4', 'C4', 'A#3/Bb3', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'D4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'G#3/Ab3', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'C4', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'A#3/Bb3', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'G#3/Ab3', 'G#3/Ab3', 'G#3/Ab3', 'B3', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#3/Ab3', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'A#3/Bb3', 'C#4/Db4', 'G#3/Ab3', 'A3', 'A#3/Bb3', 'B3', 'B3', 'D#4/Eb4', 'E4', 'E4', 'C#4/Db4', 'D4', 'D4', 'C4', 'F#4/Gb4', 'G4', 'A#3/Bb3', 'G#3/Ab3', 'A#3/Bb3', 'A#3/Bb3', 'B3', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'C4', 'D#4/Eb4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'D#4/Eb4', 'C4', 'D#4/Eb4', 'D#4/Eb4', 'D4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'D#4/Eb4', 'B3', 'B3', 'C4', 'C4', 'C4', 'B3', 'B3', 'C#4/Db4', 'E4', 'E4', 'E4', 'E4', 'E4', 'C#4/Db4', 'C4', 'A#3/Bb3', 'G#3/Ab3', 'G#3/Ab3', 'A3', 'A#3/Bb3', 'C4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F4', 'F4', 'F4', 'C#4/Db4', 'B3', 'A3', 'G#3/Ab3', 'A3', 'A#3/Bb3', 'A#3/Bb3', 'B3', 'G#3/Ab3', 'G#3/Ab3', 'B3', 'C#4/Db4', 'C#4/Db4', 'C#4/Db4', 'C4', 'C4', 'G#3/Ab3', 'G#3/Ab3', 'D4', 'D4', 'D4', 'B3', 'C4', 'C4', 'C4', 'C#4/Db4', 'D#4/Eb4', 'D#4/Eb4', 'E4', 'D#4/Eb4', 'C4', 'C4', 'C4', 'C4', 'B3', 'B3', 'C#4/Db4']) : 'Night Changes',
      tuple(['E4', 'E4', 'E4', 'F#3/Gb3', 'F#3/Gb3', 'F#3/Gb3', 'E3', 'E3', 'E3', 'E3', 'E3', 'B2', 'B2', 'B2', 'B2', 'F3', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'G#4/Ab4', 'F4', 'F4', 'B4', 'B4', 'B4', 'B4', 'B4', 'C4', 'B3', 'B3', 'C#4/Db4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'D4', 'F#4/Gb4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'E4', 'E4', 'D#4/Eb4', 'A#3/Bb3', 'F4', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'B3', 'B3', 'B3', 'B3', 'B3', 'B3', 'C#4/Db4', 'D4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'D#4/Eb4', 'D#4/Eb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'G#4/Ab4', 'G#4/Ab4', 'A4', 'A4', 'F#4/Gb4', 'F#4/Gb4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'E4', 'B3', 'B3', 'B3', 'B3', 'B3', 'B3', 'B3', 'D#4/Eb4', 'A3', 'B3', 'B3', 'E4', 'E4', 'E4', 'E4', 'D3', 'C4', 'C4', 'F#4/Gb4', 'F#4/Gb4', 'F#4/Gb4', 'C#4/Db4', 'A#4/Bb4', 'B4', 'B4', 'B4', 'G#4/Ab4']) : 'My Heart Will Go On'
}

if best_match:
    print("The best match is:", song_mapping[tuple(best_match)])
else:
    print("No match found.")

"""My Heart Will Go on Violin Snippet

['E4', 'F#4/Gb4', 'F#4/Gb4', 'G4', 'G#4/Ab4', 'G#4/Ab4', 'G#5/', 'G#5/', 'G#5/', 'G#5/', 'G#4/Ab4', 'G4', 'G4', 'G4', 'E4', 'E4', 'E4', 'E4', 'E4', 'A#3/Bb3', 'B3', 'B3', 'D#4/Eb4', 'D#4/Eb4', 'E4', 'E4', 'E4', 'F#4/Gb4', 'F#4/Gb4', 'F4', 'F4', 'F#4/Gb4', 'F#4/Gb4', 'G#4/Ab4', 'E5', 'E5', 'C#5/Db5', 'E5', 'E5', 'E5', 'E5', 'E5', 'F4', 'E5', 'E5', 'D#5/Eb5', 'E5', 'E5', 'D5', 'E5', 'E4', 'B3', 'F#5/Gb5', 'G#5/', 'G#5/', 'G#5/', 'F#5/Gb5', 'F#5/Gb5', 'B3', 'F#3/Gb3', 'A4', 'E5', 'E5', 'E5', 'E5', 'E5', 'E5', 'E5', 'G4', 'E5', 'E5', 'E4', 'B4', 'B4', 'B4', 'B4', 'B4', 'B4', 'G#4/Ab4', 'B3', 'D4', 'D4', 'B3']
"""